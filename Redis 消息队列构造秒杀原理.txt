Redis 消息队列构造秒杀原理

抢购、秒杀是如今很常见的一个应用场景，主要需要解决的问题有两个：
  1 高并发对数据库产生的压力
  2 竞争状态下如何解决库存的正确减少（"超卖"问题）
对于第一个问题，需要查看本站对mysql 具体优化的方案；这里重点解决后者问题
减少超卖

操作原理：
使用redis队列，因为pop操作是原子的，即使有很多用户同时到达，也是依次执行，推荐使用。

1、在活动开始的前期，秒杀的脚本会将商品的库存信息缓存到redis中
具体操作 （php）

    <?php
    $store=1000;  // 假设秒杀库存设置1000个
    $redis=new Redis();  
    $result=$redis->connect('127.0.0.1',6379);  

    $res=$redis->llen('goods_stock'); // 查看已经存在的库存
    var_dump($res);

    if(intval($res)>=$store){
       var_dump('库存加满了');
       die();
    }

    $count=$store-$res;  
    for($i=0;$i<$count;$i++){  
        $redis->lpush('goods_stock',1); // 将库存列表一次加入redis的列表
    }

    $stock = $redis->llen('goods_stock');
    var_dump(' 库存补充到 1000 ');
    ?>

2、模拟抢购操作

<?php

$redis=new Redis();
$result=$redis->connect('127.0.0.1',6379);

$peple = 1009; // 假设有 1009 个用户来抢商品

for($i=0;$i<$peple;$i++){
   $rrt = $redis->Lpop('goods_stock'); // Lpop 获取 key 列表的头元素并移除头元素
   if($rrt){
     echo '抢到了 : '.$i.' ; res : '.$rrt; // 抢到了就进行下一步的下单操作
     // TODO 进入正常的订单流程
   }else {
     echo '售罄了 : '.$i; // 提示用户没有抢到
     die();
   }
   echo '<br/>';
}

?>

上述只是简单模拟高并发下的抢购，真实场景要比这复杂很多，很多注意的地方
如抢购页面做成静态的，通过ajax调用接口
再如上面的会导致一个用户抢多个，思路：

在以上思路的基础上添加一个 ‘排队的队列’，如果抢单的用户已经在 ‘排队的队列’ 的队列里了 就提示用户不能再抢了，并提示抢购失败。



