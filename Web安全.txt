1、密码哈希
    PHP5.5提供了许多新特性及Api函数，其中之一就是Password Hashing API(创建和校验哈希密码)。
    比 MD5 更强大
    @ 加密 string password_hash ( string $password , integer $algo [, array $options ])
    栗子：
        $password = '123abc';
        $passwordHash = password_hash( $password, PASSWORD_DEFAULT, ['cost' => 12] );
    @ 验证 boolean password_verify ( string $password , string $hash )
    栗子：
        $password = 'test';
        if (password_verify($password, $passwordHash) === false) {
            exit('密码错误！');
        }
2、XSS攻击
    XSS攻击也是对HTML和JS的一种注入.
    php 在后台处理的方式有：
        （1）htmlentities()函数  htmlentities() 函数把字符转换为 HTML 实体。
            $str = strip_tags($str);   //过滤html标签  
            $str = htmlspecialchars($str);   //将字符内容转化为html实体
        （2）参照网上给出的一个函数使用
            function xss_clean($data){
                $data=str_replace(array('&','<','>'),array('&amp;','&lt;','&gt;'),$data);
                $data=preg_replace('/(&#*\w+)[\x00-\x20]+;/u','$1;',$data);
                $data=preg_replace('/(&#x*[0-9A-F]+);*/iu','$1;',$data);
                $data=html_entity_decode($data,ENT_COMPAT,'UTF-8');
                $data=preg_replace('#(<[^>]+?[\x00-\x20"\'])(?:on|xmlns)[^>]*+>#iu','$1>',$data);
                $data=preg_replace('#([a-z]*)[\x00-\x20]*=[\x00-\x20]*([`\'"]*)[\x00-\x20]*j[\x00-\x20]*a[\x00-\x20]*v[\x00-\x20]*a[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu','$1=$2nojavascript...',$data);
                $data=preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*v[\x00-\x20]*b[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu','$1=$2novbscript...',$data);
                $data=preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*-moz-binding[\x00-\x20]*:#u','$1=$2nomozbinding...',$data);
                $data=preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?expression[\x00-\x20]*\([^>]*+>#i','$1>',$data);
                $data=preg_replace('#(<[^>]+?)style[\00-\x20]*=[\x00-\x20]*[`\'"]*.*?behaviour[\x00-\x20]*\([^>]*+>#i','$1>',$data);
                $data=preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:*[^>]*+>#iu','$1>',$data);
                $data=preg_replace('#</*\w+:\w[^>]*+>#i','',$data);
                do{
                    $old_data=$data;
                    $data=preg_replace('#</*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^>]*+>#i','',$data);
                }while($old_data!==$data);
                return $data;
            }
3、CSRF攻击
    CSRF 攻击的主要目的是让用户在不知情的情况下攻击自己已登录的一个系统账户，类似于钓鱼。
    其主要利用的是 获取客户端存放的 session 信息，模拟用户登陆第三方网站进而操作信息。
    @ CSRF漏洞检测：
       检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，
       那么基本上可以确定存在CSRF漏洞。
    @ 防御CSRF攻击：
    （1）验证 HTTP Referer 字段
    （2）在请求地址中添加 token 并验证
    （3）在 HTTP 头中自定义属性并验证

4、SQL注入（ PDO原理）
    （1）使用PDO对象（对于任何数据库驱动都好用）
        $stmt = $pdo->prepare('SELECT * FROM employees WHERE name = :name');
        $stmt->execute(array('name' => $name));
    （2）使用MySqli
        $stmt = $dbConnection->prepare('SELECT * FROM employees WHERE name = ?');
        $stmt->bind_param('s', $name);
        $stmt->execute();
    （3）@ 打开php 的安全模式 防止一些系统级函数的使用
        php.ini 中 safe_mode = on
        @ 关闭危险函数
        disable_functions = system,passthru,exec,shell_exec,popen,phpinfo
        @ 关闭PHP版本信息在http头中的泄漏
        expose_php = Off
        @ 关闭注册全局变量
        register_globals = Off
        @ 打开magic_quotes_gpc来防止SQL注入
        magic_quotes_gpc = On
        @ 错误信息控制
        display_errors = Off
        @ 错误日志 在关闭display_errors后能够把错误信息记录下来，便于查找服务器运行的原因
        log_errors = On
        error_log = D:/usr/local/apache2/logs/php_error.log
        @ PHP 代码中防范
            * 初始化你的变量，避免用户自己将变量提交创建
            * sql语句有四大句：select、update、delete、insert，使用正则判断提交内容字符，有则提示操作失败
            * 使用字符的替换操作将
                if (!get_magic_quotes_gpc()) // 判断magic_quotes_gpc是否为打开     
                {     
                    $post = addslashes($post); // 进行magic_quotes_gpc没有打开的情况对提交数据的过滤     
                }     
                $post = str_replace("_", "\_", $post); // 把 '_'过滤掉     
                $post = str_replace("%", "\%", $post); // 把' % '过滤掉     
                $post = nl2br($post); // 回车转换     
                $post= htmlspecialchars($post); // html标记转换
    
5、对称加密、非对称加密
    常用的加密分为对称加密和非对称加密；
    对称加密 ：就是发送方和接收方都用同一个秘钥进行加密解密（常用）；
    非对称加密 ：则使用一对公钥和私钥来进行加密， 发送方只需要用接收方的公钥将数据加密即可；
    可逆的加密 详细查看 Xcrypt.php 文档

