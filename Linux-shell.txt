1、变量
    str="string"
    echo $str
    echo ${str}
    str=123
    echo $str
    注意点：变量等号两边不能有空格出现

2、变量使用
    str2=$str
    echo $str2;
    str3=${str}
    echo ${str3}
    curDir=$(pwd)
    echo "curDir = ${curDir}"
    curDirCon=`ls`
    echo "curDirCon = ${curDirCon}"
    
    # 输出：
    =======变量=======
    string
    string
    123
    123
    123
    curDir = /Users/aron/git-repo/ShellLearning/helloshell
    curDirCon = data
    syntax.sh

3、打印
    str4="string4"
    echo $str4
    echo "str4=$str4"
    echo "str4=${str4}str3=${str3}"

    # 输出：
    =======打印=======
    string4
    str4=string4
    str4=string4str3=123

4、运算
    （1）echo "=======expr运算======="
    result=$(expr 5 + 5)
    echo ${result}
    result=$(expr 16 - 5)
    echo ${result}
    result=$(expr 5 \* 5)
    echo ${result}
    result=$(expr 28 / 5)
    echo ${result}

    # 输出：
    =======expr运算=======
    10
    11
    25
    5
    注意点：*乘法运算符号需要转义

    （2）echo "=======[]运算======="
    result=$[5 + 5]
    echo ${result}
    result=$[16 - 5]
    echo ${result}
    result=$[5 * 5]
    echo ${result}
    result=$[28 / 5]
    echo ${result}

    # 输出：
    =======[]运算=======
    10
    11
    25
    5

5、控制
    （1）数值比较
        if [[ 3 > 7 ]]; then
            echo "hehe"
        else
            echo "yes"
        fi

        # 输出：
        yes
        注意：比较符 还可以使用下面的比较符号
        比较符	      描述  
        n1 -eq n2	检查n1是否与n2相等
        n1 -ge n2	检查n1是否大于或等于n2
        n1 -gt n2	检查n1是否大于n2
        n1 -le n2	检查n1是否小于或等于n2
        n1 -lt n2	检查n1是否小于n2
        n1 -ne n2	检查n1是否不等于n2

    （2）字符串比较
        比较符	          描述
        str1 = str2	    检查str1是否和str2相同
        str1 != str2	检查str1是否和str2不同
        str1 < str2	    检查str1是否比str2小
        str1 > str2	    检查str1是否比str2大
        -n str1	        检查str1的长度是否非0
        -z str1	        检查str1的长度是否为0
        
        echo "=======控制字符串比较======="
        str1="abc"
        str2="abd"
        if [[ $str1 > $str2 ]]; then
            echo "$str1 大于 $str2"
        else
            echo "$str1 小于等于 $str2"
        fi

        if [[ -z $str1 ]]; then
            echo "str1 为空"
        else
            echo "str1 不为空"
        fi

        str1=""
        if [[ -z $str1 ]]; then
            echo "str1 为空"
        else
            echo "str1 不为空"
        fi

        # 输出：
        =======控制字符串比较=======
        abc 小于等于 abd
        str1 不为空
        str1 为空

    （3）文件比较
        比较符	              描述
        -d file	            检查file是否存在并是一个目录
        -e file	            检查file是否存在
        -f file	            检查file是否存在并是一个文件
        -r file	            检查file是否存在并可读
        -s file	            检查file是否存在并非空
        -w file	            检查file是否存在并可写
        -x file	            检查file是否存在并可执行
        -O file	            检查file是否存在并属当前用户所有
        -G file	            检查file是否存在并且默认组与当前用户相同
        file1 -nt file2	    检查file1是否比file2新
        file1 -ot file2	    检查file1是否比file2旧
        
        echo "=======控制文件比较======="
        file="syntax.sh"
        if [[ -e $file ]]; then
            echo "${file} 文件存在"
        else
            echo "${file} 文件不存在"
        fi

        if [[ -f $file ]]; then
            echo "${file} 是一个文件"
        else
            echo "${file} 不是一个文件"
        fi

        if [[ -d $file ]]; then
            echo "${file} 是一个文件夹"
        else
            echo "${file} 不是一个文件夹"
        fi

        # 输出：
        =======控制文件比较=======
        syntax.sh 文件存在
        syntax.sh 是一个文件
        syntax.sh 不是一个文件夹

    （4）循环
        # for循环
        echo "=======循环for======="
        num=0
        for (( i = 0; i < 10; i++ )); do
            num=$[$num + $i]
        done
        echo "result = ${num}"

        # 输出：
        =======循环for=======
        result = 45

    (5) for in 循环处理文件
        data 文件路径 /home/www/data
        内容 ：
        The quick brown fox jumps over the lazy dog.
        The quick brown fox jumps over the lazy dog.
        The quick brown fox jumps over the lazy dog.
        The quick brown fox jumps over the lazy dog.
        
        echo "=======循环for in======="
        file="data"
        IFS_OLD=$IFS
        IFS=$'\n'
        for line in $(cat $file)
        do
            echo "${line}"
        done
        IFS=${IFS_OLD}

        # 注意：$IFS是文件循环处理的分隔符，按按行处理数据需要把该值设置为$'\n'，处理完成之后恢复旧值
        # 输出：
        =======循环for in=======
        The quick brown fox jumps over the lazy dog.
        The quick brown fox jumps over the lazy dog.
        The quick brown fox jumps over the lazy dog.
        The quick brown fox jumps over the lazy dog.

    （6）while 循环
        while表示条件满足执行循环
        i=1
        while [[ i -lt 10 ]]; do
            i=$[$i + 1]
            echo "${i}"
        done
        
        # 9*9乘法口诀表
        echo "-----------9*9乘法口诀表--------------------"
        i=1
        while [[ i -lt 10 ]]; do
            j=1
            line=""
            while [[ j -le 10 ]]; do
                if [[ j -le i ]]; then
                    res=$[$i * $j]
                    resStr="$j x $i = $res"
                    line=${line}${resStr}"\t"
                fi
                j=$[$j + 1]
            done
            echo -e ${line}
            i=$[$i + 1]
        done
        
        输出：
        -----------9*9乘法口诀表--------------------
        1 x 1 = 1	
        1 x 2 = 2	2 x 2 = 4	
        1 x 3 = 3	2 x 3 = 6	3 x 3 = 9	
        1 x 4 = 4	2 x 4 = 8	3 x 4 = 12	4 x 4 = 16	
        1 x 5 = 5	2 x 5 = 10	3 x 5 = 15	4 x 5 = 20	5 x 5 = 25	
        1 x 6 = 6	2 x 6 = 12	3 x 6 = 18	4 x 6 = 24	5 x 6 = 30	6 x 6 = 36	
        1 x 7 = 7	2 x 7 = 14	3 x 7 = 21	4 x 7 = 28	5 x 7 = 35	6 x 7 = 42	7 x 7 = 49	
        1 x 8 = 8	2 x 8 = 16	3 x 8 = 24	4 x 8 = 32	5 x 8 = 40	6 x 8 = 48	7 x 8 = 56	8 x 8 = 64	
        1 x 9 = 9	2 x 9 = 18	3 x 9 = 27	4 x 9 = 36	5 x 9 = 45	6 x 9 = 54	7 x 9 = 63	8 x 9 = 72	9 x 9 = 81

    （7）容器 和 方法
        * array[$line_count]=$line  把内容保存到数组
        * ${#array[@]}              获取数组的元素个数
        * content=${array[i]};      读取数组第i个元素

        @ 方法的定义有两种方式
        * function func1 { #这里定义方法体 }
        * func2() { #这里定义方法体 }
        @ 方法返回值的处理有三种方式
        * return 最大返回256，表示结果码，有特殊含义，并且只能返回数值
        * echo 返回
        * 保存在全局变量中
        @ 方法的参数
        * 参数的传递添加在方法之后，多个使用空格分割
        * 参数的获取使用$1,$2以此类推，特别地$0表示文件名、$#表示参数的个数
        
        function test1 {
            return 200;
        }
        test2() {
            echo "test2 invoked"
        }
        echo `test1` # 执行 test1 函数
        echo `test2` # 执行 test2 函数
        
        # 接收参数
        test1
        retval=$? # 将 return 的数据接收
        echo "test1 retval=$retval"

        ret=`test2` # 将 echo 的数据接收
        echo "test2 retval=$ret"
        
        # 带参数的函数
        checkDir() {
            path=$1
            msg=$2
            if [[ -d $path ]]; then
                echo "目录存在 ${path}"
                checkDirRes=$path
                return 1
            else
                echo "${msg} ${path}"
            fi
        }
        
        # 调用时 第一个参数：$(pwd)；第二个参数："目录不存在"；
        checkDir $(pwd) "目录不存在"
        echo "checkDirRes = ${checkDirRes} "
        # ==========输出============
        目录存在 /home/www
        checkDirRes = /home/www
    
    （8）目录的读取
        echo "=======文件目录======="
        function read_implement_file_recursively {
            if [[ -d $1 ]]; then
                for item in $(ls $1); do
                    itemPath="$1/${item}"
                    if [[ -d $itemPath ]]; then
                        # 目录
                        echo "处理目录 ${itemPath}"
                        read_implement_file_recursively $itemPath
                    else 
                        # 文件
                        echo "处理文件 ${itemPath}"
                    fi
                done
            else
                echo "err:不是一个目录"
            fi
        }
        read_implement_file_recursively $(pwd)
        
        输出：
        =======文件目录=======
        处理文件 /Users/aron/git-repo/ShellLearning/helloshell/data
        处理目录 /Users/aron/git-repo/ShellLearning/helloshell/subfolder
        处理文件 /Users/aron/git-repo/ShellLearning/helloshell/subfolder/data2
        处理文件 /Users/aron/git-repo/ShellLearning/helloshell/syntax.sh

    （9）文件写入
        使用输出重定向把内容输出到文件
        >   输出重定向符号先清空文件然后把内容写入到文件中
        >>  输出重定向符号把内容追加写入到文件中
        
        此外可以结合其他命令实现排序、去重功能
        sort 命令对文件内容以行作为单位排序
        uniq 命令对文件内容进行去重，以行为单位，一般需要结合sort命令使用

        sort ${file} | uniq > ${destfile}
        # 将 file 文件 以行为单位排序 排重 写入被清空过的 destfile

6、模块
    Math.sh保存了一些数学计算函数
    #!/bin/bash
    power(){
        base=$1
        exp=$2
        result=1
        for (( i = 0; i < $exp; i++ )); do
            result=$[ $result * $base ];
        done
        echo $result
    }
    
    其他模块使用. ./Math.sh包含这个模块，可以调用其中定义的power方法
    注意：. ./Math.sh中 【. 是 source 的简写】，这里也可以写成【source ./Math.sh】
    同路径下 调用
    
    echo "=======模块======="
    . ./Math.sh
    result=$(power 3 5)
    echo "3^5 = ${result}"

    输出：
    =======模块=======
    3^5 = 243

7、流程模块
    流程模块是包含了一些列操作的模块，可以向该模块传递参数，也可以有返回值。
    但是实际应用中我们用来处理 文件操作 及 远程操作，比如 项目一键自动部署等等。
    
    # test.sh
    echo "参数>>${@}"                             # 获取所有参数项
    while getopts :a:b:c: opt                    # 指定可添加的参数项
    do
        case "$opt" in
            a) Aval=$OPTARG                      # $OPTARG 接收到的值 并赋值给 Aval
                    echo "参数 $opt = ${Aval}";;
            b) Bval=$OPTARG                      # $OPTARG 接收到的值 并赋值给 Bval
                    echo "参数 $opt = ${Bval}";;
            c) Cval=$OPTARG                      # $OPTARG 接收到的值 并赋值给 Cval
                    echo "参数 $opt = ${Cval}";;
            *) echo "未知参数 $opt";;             # 当接到其他未指定项 （除 -a -b -c 之外的值）返回为值参数
        esac
    done

    执行 ： sh test.sh -a hahaha
    输出 ：
        参数>>-a hahaha
        参数 a = hahaha

    看到这里恭喜！可以简单的写一个shell功能工具了。
    
8、获取输入
    checkInputDestDirRecursive() {
            echo -n "请输入目录: "
            read path
            if [[ -d $path ]]; then
                    inputPath=$path
            else
                    echo -n "输入的目录无效，"
                    checkInputDestDirRecursive
            fi
    }
    checkInputDestDirRecursive # 调用该函数
    echo ${inputPath}

    * echo -n "请输入目录: " 是输入的提示，-n表示不换行，用户的输入跟随在提示后面
    * read path 把用户的输入内容保存在变量path中

9、菜单
    使用上面学到的东西 我们可以做一个简单的操作
    
    # test.sh
    # 输出菜单
    function getMunu {
        clear
        echo ""
        echo -e "\t\t\t选项菜单\n"
        echo -e "\t1. 删除注入内容"
        echo -e "\t2. 添加注入内容"
        echo -e "\t0. Exit menu\n\n"
        echo -en "\t\tEnter option: "
        read -n 1 option
    }
    # remove 操作
    function remove {
        echo "do something to removeInjectedContent"
    }
    # add 操作
    function add {
        echo "do something addInjectedContent"
    }
    # 循环操作指导执行了退出的操作 
    while [[ 1 ]]; do
        getMunu
        case $option in
        0 )
                echo ""
                echo "Bye"
                exit 0
        ;;
        1 )
                # 删除配置文件中注入的内容
                remove
        ;;
        2 )
                # 添加配置文件中注入的内容
                add
        ;;
        h )
                getMunu
        ;;
        * )
                echo "Wrong!!"
        ;;
        esac

        echo ""
        echo -en "\n\n\tHit any key to continue"
        read -n 1 line
    done

    
    输出：
    ======================================================

			选项菜单

	1. 删除注入内容
	2. 添加注入内容
	0. Exit menu


		Enter option:
 # 当输入1 触发 remove
 # 当输入2 触发 add
 # 当输入h 重新操作加载菜单
 # 当输入0 退出操作
 # 输入其他提示 "Wrong!!"


